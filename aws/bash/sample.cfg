#!/bin/bash
#
# sample.cfg                                     10/18/2017 19:15:00
#
# Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
#
# aws_create_instance sample configuration file 
#
# This file is intened to demonstrate a way to customize a large number
# of configuration parameters that specify how an aws instance is created
# and configured. It is only and example and is not intended for large scale
# production systems. 
#
# The values here allow you to override the default parmaters specified in the 
# top of the aws_create_instance script. In fact, it's an exact copy of that
# section of the file, with all the parameters commented out. You can
# enable and modify any of these parameters, and name the modified file in
# meaningful ways. 
#
# Note that no sanity or value checking is done here, so look at the aws
# documentation a bit before you change anything. 
#
# Usage:   aws_create_instance [options] sample.cfg
#
# This file is read by aws_create_instance right after all of the default
# values are read in. Any parameter you set here will override the defaults
#

###############################################################################
# Configurable parameters
###############################################################################

        # when creating all the parts, this is used as the prefix
        # to the "Name" tags that are placed on all those created
        # parts - this name has a partial timestamp in it. 

#    NAME_TAG_PREFIX="$USER $(date +'%a %H:%M')"

        # ssh key defaults

        # where the .pem keys are on your machine
        # For example: "~/.ssh"

#    KEY_PATH="<PATH WHERE YOU PUT THE AWS KEY>"

        # the name of the key you are going to use
        # For example: "me-key-pair-uswest2"

#    KEY_NAME="<AWS SSH KEY NAME, NOT FILENAME>"

        # full path to ssh public key file
        # Using the examples above, it would be "/.ssh/me-key-pair-uswest2.pem"

#    KEY_FILE=$KEY_PATH/$KEY_NAME.pem

        # instance information

        # region where you will run your instances
        # For example: "us-west-2" or "us-east-1"

#    REGION="<WHERE YOU WILL RUN YOUR INSTANCE>"

        # AMI NAME - donâ€™t forget the single qoutes!
        # This is the name that NVIDIA publishes to on the AWS MarketPlace

#    IMAGE_NAME='NVIDIA Volta Deep Learning AMI'

        # So it only needs to be update in one place, here is the name of
        # the default AWS Ubuntu image that not support GPUs. It's here for
        # use by cfg files.  

#    IMAGE_NAME_UBUNTU='ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170721'

        # login name burned into the above AMI at it's creation
        # Note that "ubuntu" is the default user of 'NVIDIA Volta Deep Learning AMI'

#    LOGIN_NAME="ubuntu"

        # The NVIDIA AMI images have included the ubuntu 'nfs-common' package
        # which is used to connect to EFS volumes. The default AWS Ubuntu AMI does
        # not. This flag is used here to install it for you if you use non-NVIDIA ami

#    INSTALL_NFS_COMMON="false"

        # Security group for instance, to allow SSH, pinging and digits
        # can use an existing security group, or can defined your own privite one here

#    USE_EXISTING_SECURITY_GROUP="true"
#    if [ "$USE_EXISTING_SECURITY_GROUP" == "true" ]; then

            # pre-existing security group - we will not delete it when done

            # Security Group Name - don't forget rhe single quotes!
            # For example: 'me_SG_uswest2'

#        SSH_SECURITY_GROUP_NAME="<MY SECURITY GROUP NAME>"

#        SECURITY_GROUP_CREATE_IF_NEEDED="false"    # if don't find group by given name stop 
#    else

            # create your own security group.  
            # can delete it when exit SSH session (or use 'aws-last') if flag below set
            # pull timestamp out of NAME here if you want to reuse it across your sessions

            # My Security Group Name
            # This is the "Group Name" column in the EC2 Security Group GUI console.
            # This Group Name can not be changed once it is created.
            # For example: "$NAME_TAG_PREFIX me_SG_uswest2"

#        SSH_SECURITY_GROUP_NAME="<MY NEW SECURITY GROUP NAME>"

            # These are flags that control this auto-create of a security
            # group by this script. 
            #
            # ..CREATE_IF_NEEDED:   if don't find group by given name, will create one
            # ..DELETE_IF_CREATED:  true to delete security group we create, IF we created it

#        SECURITY_GROUP_CREATE_IF_NEEDED="true"
#        SECURITY_GROUP_DELETE_IF_CREATED="true"

            # My Security Group Description
            # This is the "Description" column in the EC2 Security Group GUI console
            # This Description can not be changed once it is created.
            # For example: "Generated NVIDIA Volta SSH/Ping Security group"

#        SSH_SECURITY_GROUP_DESCP="<MY SECURITY GROUP DESCRIPTION>"

            # My Security Group Name Tag
            # This is the "Name" column in the EC2 Security Group GUI console
            # This Name may be changed later after it is created.
            # For example: "$NAME_TAG_PREFIX me_SG_uswest2"

#        SSH_SECURITY_GROUP_NAME_TAG="<MY SECURITY GROUP NAME TAG>"
               
            # Sample setup to:
            #  - enable only SSH, SSL, DIGITS6, and ping ingress ports
            #  - enable all exgress ports
            # Note that for the code in this script to work, that the ability i
            # to ping the instance must be enabled.

            #                    protocol,    to, from,         cidr_ip, description
#        SSH_SECURITY_INGRESS_RULES=( "tcp,    22,   22,       0.0.0.0/0, For SSH"
#                                     "tcp,   443,  443,       0.0.0.0/0, For SSL"
#                                     "tcp,  5000, 5000,       0.0.0.0/0, For NVIDIA DIGITS6"
#                                     "icmp,    8,   -1,       0.0.0.0/0, To allow to be pinged" 
#                                   )
#            #                    protocol,    to, from,         cidr_ip, description
#        SSH_SECURITY_EGRESS_RULES=(
                                  )
#    fi 

        # These are parameters that specify type of instance that is to be
        # created. This name indicates the number of CPUs, GPUs and memory
        # that will be allocated to the instance when it is created

#    NAME_TAG="$NAME_TAG_PREFIX P3"             # what name we are calling it

        # these define the instance typpe, and the boot volume size
        # and type. 

#    INSTANCE_TYPE=p3.2xlarge                   # p3 are Voltas, 2xLarge is 1GPU, 16xLarge is 8GPUs
#    EBS_BOOT_VOLTYPE='gp2'                     # default 'gp2' or faster 'io1'
#    EBS_BOOT_VOLSIZE=32                        # in GB
#    EBS_BOOT_VOLIOPS_RATIO=25                  # for 'io1' only, max Ratio=50 (2017) Actual IOPS=SizeG*Ratio 

        # EFS (elastic file system) volumes are probably a better solution
        # for the NVIDIA Deep Learning usage as you can have a common data
        # source that's usable by mutiple instance. But in case you the instance
        # needs some private storage, a EBS (Elastic Block Storage) can be 
        # used. 
        # The biggest disadvantage of EBS is that they can't be shared
        # between running instances... 
        #
        # setting this field to "true" will create and add a private EBS
        # volume to the instance. Note that we set up this volume below to
        # auto delete when the instance is deleated. For boot volumes, this
        # makes sense, but AWS does provide was to prevent this if needed.

#    CREATE_PRIVATE_EBS_VOLUME="false"          # true to create private EBS volume

        # parameter that specify the EBS volume type and size if 
        # it is enabled above

#    EBS_DATA_VOLTYPE='gp2'                     # default 'gp2' or faster 'io1' Provisioned IOPS SSD
#    EBS_DATA_VOLSIZE=32                        # in GiB
#    EBS_DATA_VOLIOPS_RATIO=25                  # for 'io1' only, max Ratio=50 (2017) Actual IOPS=SizeG*Ratio 

        # These are parameters that the EFS will be mounted with.

#    MOUNT_EFS_VOLUME="false"

        # quick and dirty way to assocatate a mount point with a EFS volume name
        #  <volume name>,<mount point>.. simple bash magic to follow  
        # EFS volume ID's are determined by looking up the name, and are thus not required
        # you can supply as many names as you like here, but (10/2017) AWS will by default
        # limit you to 10 EFS mounts on one instance, unless you request an increase
        #
        # Volume name can have spaces in it, but don't put it in qoutes. Spaces around comma ok

#    EFS_VOLUME_NAME_LIST=(  "Test Volume1 EFS,  /efs/test_vol1" \
#                            "Test Volume2 EFS,  /efs/test_vol2" \
#                            "Test Volume3 EFS,  /efs/test_vol3" \
#                         )

        # these are parameters used in the 'mount' command for the above EFS volumes
        # see 'man nfs' for details. These are the most common parameters, you can
        # add additonal ones by modifying the script. 

#    EFS_TYPE="nfs4 nfsvers=4.1"
#    EFS_RSIZE="rsize=1048576"
#    EFS_WSIZE="wsize=1048576"
#    EFS_TIMEO="timeo=600"
#    EFS_RETRANS="retrans=2"
#    EFS_HARD="hard"

        # script runtime/state save parameters
        #
        # A couple of variables used by the code, and "aws_last" to know what
        # to do when the exit our ssh shell into the instance. 
        # note this is only true when in the session that started the shell,
        # but demonstrate using the aws InstanceID to minipulate the image.
        
#    STOP_ON_SSH_EXIT="ask"                     # "yes, no or ask"
#    TERMINATE_ON_SSH_EXIT="no"                 # "yes, no or ask"

        # where to save our 'state' file, used by aws_connect script to
        # restart a  instance that may have been stopped
        # Values must be same in aws_connect script

#    OPT_DIR=/tmp/awsami                        # directory to hold persistent files
#    OPT_FILE=$OPT_DIR/state                    # name of file

